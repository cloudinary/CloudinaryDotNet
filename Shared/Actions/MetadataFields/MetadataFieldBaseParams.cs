namespace CloudinaryDotNet.Actions
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.Serialization;

    /// <summary>
    /// Possible value types that can be assigned to the metadata field.
    /// </summary>
    public enum MetadataFieldType
    {
        /// <summary>
        /// A single string value
        /// </summary>
        [EnumMember(Value = "string")]
        String,

        /// <summary>
        /// A single integer value.
        /// </summary>
        [EnumMember(Value = "integer")]
        Integer,

        /// <summary>
        /// A custom date in the following format: {yyyy-mm-dd}.
        /// </summary>
        [EnumMember(Value = "date")]
        Date,

        /// <summary>
        /// A single value referenced by an 'external_id' from a given list,
        /// predefined with the 'datasource' parameter.
        /// </summary>
        [EnumMember(Value = "enum")]
        Enum,

        /// <summary>
        /// Multiple values referenced by 'external_ids' from a given list,
        /// predefined with the 'datasource' parameter.
        /// </summary>
        [EnumMember(Value = "set")]
        Set,
    }

    /// <summary>
    /// Possible value types that can be assigned to the metadata validation.
    /// </summary>
    public enum MetadataValidationType
    {
        /// <summary>
        /// Greater than validation type.
        /// </summary>
        [EnumMember(Value = "greater_than")]
        GreaterThan,

        /// <summary>
        /// Less than validation type.
        /// </summary>
        [EnumMember(Value = "less_than")]
        LessThan,

        /// <summary>
        /// String length validation type.
        /// </summary>
        [EnumMember(Value = "strlen")]
        StringLength,

        /// <summary>
        /// And validation type.
        /// </summary>
        [EnumMember(Value = "and")]
        And,
    }

    /// <summary>
    /// Represents the base definition of a single metadata field.
    /// Use one of the derived classes in the metadata API calls.
    /// </summary>
    /// <typeparam name="T">Type that can describe the field type.</typeparam>
    public abstract class MetadataFieldBaseParams<T> : BaseParams
    {
        /// <summary>
        /// Gets or sets an optional unique immutable identification string for the metadata field.
        /// Default: auto-generated by Cloudinary, although it is recommended to specify this.
        /// </summary>
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or sets the type of value that can be assigned to the metadata field.
        /// </summary>
        public MetadataFieldType Type { get; set; }

        /// <summary>
        /// Gets or sets the label of the metadata field for display purposes.
        /// </summary>
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether a value must be given for this field, either when an asset is first uploaded,
        /// or when it is updated. Default: false.
        /// </summary>
        public bool Mandatory { get; set; }

        /// <summary>
        /// Gets or sets the default value for the field (a set can have multiple default values defined by an array).
        /// Default: null. Mandatory, if 'mandatory' is true.
        /// </summary>
        public T DefaultValue { get; set; }

        /// <summary>
        /// Gets or sets any validation rules to apply when values are entered (or updated) for this field.
        /// </summary>
        public MetadataValidationParams Validation { get; set; }

        /// <summary>
        /// Gets or sets the predefined list of values, referenced by external_ids, available for this field.
        /// The datasource parameter is only relevant for fields where the selected values must come
        /// from a predefined list of values ('enum' or 'set' type fields).
        /// </summary>
        public MetadataDataSourceParams DataSource { get; set; }

        /// <summary>
        /// Add parameters to the object model dictionary.
        /// </summary>
        /// <param name="dict">Dictionary to be updated with parameters.</param>
        protected override void AddParamsToDictionary(SortedDictionary<string, object> dict)
        {
            AddParam(dict, "type", Api.GetCloudinaryParam(Type));
            AddParam(dict, "mandatory", Mandatory);

            if (!string.IsNullOrEmpty(ExternalId))
            {
                AddParam(dict, "external_id", ExternalId);
            }

            if (Validation != null)
            {
                dict.Add("validation", Validation.ToParamsDictionary());
            }

            if (DataSource != null)
            {
                dict.Add("datasource", DataSource.ToParamsDictionary());
            }
        }

        /// <summary>
        /// Validate object models for instances with validation.
        /// </summary>
        /// <param name="allowedValidationTypes">List of validation types allowed for the metadata field type.</param>
        protected void CheckScalarDataModel(List<Type> allowedValidationTypes)
        {
            Utils.ShouldNotBeSpecified(() => DataSource);

            if (Validation == null)
            {
                return;
            }

            var validationType = Validation.GetType();
            var hasForbiddenValidationRule = !allowedValidationTypes.Contains(validationType);
            var allowedTypeNames = string.Join(", ", allowedValidationTypes.Select(type => type.Name));
            if (hasForbiddenValidationRule)
            {
                var message = $"Only validations of types {allowedTypeNames} can be applied to the metadata field";
                throw new ArgumentException(message);
            }

            Validation.Check();
        }
    }
}
