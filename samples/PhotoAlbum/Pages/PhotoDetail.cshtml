@page "/MyPhotos/{id}"
@model PhotoAlbum.Pages.PhotoDetailModel

@{
    ViewData["Title"] = "Photo Detail";
}

<div class="container mt-5">
    <div class="text-center">
        <h1 class="mb-4">Photo Details</h1>
    </div>

    @if (Model.Photo == null)
    {
        <div class="alert alert-warning text-center" role="alert">
            Photo not found.
        </div>
    }
    else
    {
        <div class="photo-detail bg-light p-4 rounded shadow-sm">
            <h2 class="text-muted mb-3">@Model.Photo.PublicId</h2>

            <!-- Transformation Controls Section -->
            <div class="row align-items-center mb-4">
                <div class="col-md-3">
                    <label for="width" class="form-label">Width:</label>
                    <input type="number" id="width" name="width" value="500" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label for="height" class="form-label">Height:</label>
                    <input type="number" id="height" name="height" value="500" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label for="crop" class="form-label">Crop:</label>
                    <select id="crop" name="crop" class="form-select">
                        <option value="fit">Fit</option>
                        <option value="fill">Fill</option>
                        <option value="scale">Scale</option>
                        <option value="thumb">Thumbnail</option>
                        <option value="auto">Auto</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="effect" class="form-label">Effect:</label>
                    <select id="effect" name="effect" class="form-select">
                        <option value="">None</option>
                        <option value="sepia">Sepia</option>
                        <option value="cartoonify">Cartoonify</option>
                        <option value="blur">Blur</option>
                        <option value="outline">Outline</option>
                    </select>
                </div>
            </div>

            <!-- Effect Intensity and Apply Button -->
            <div class="row align-items-center mb-4">
                <div class="col-md-10">
                    <label for="effect-intensity" class="form-label">Effect Intensity (optional):</label>
                    <input type="range" id="effect-intensity" name="effect-intensity" min="0" max="100" value="50" class="form-range" />
                </div>
                <div class="col-md-2 text-end">
                    <button type="button" id="apply-transformation" class="btn btn-primary w-100">Apply</button>
                </div>
            </div>

            <!-- Main Transformed Image Display -->
            <div id="transformed-image" class="text-center mt-4">
                @Html.Raw(Model.Cloudinary.Api.UrlImgUp.Format(Model.Photo.Format)
                         .Transform(new Transformation().Width(500).Crop("fit"))
                         .BuildImageTag(Model.Photo.PublicId, new CloudinaryDotNet.StringDictionary("class=img-fluid rounded shadow-sm")))
            </div>
        </div>
    }
</div>

@section scripts {
    <script>
        document.getElementById('apply-transformation').addEventListener('click', function () {
            const width = document.getElementById('width').value;
            const height = document.getElementById('height').value;
            const crop = document.getElementById('crop').value;
            const effect = document.getElementById('effect').value;
            const effectIntensity = document.getElementById('effect-intensity').value;

            // Create transformation string
            let transformation = `c_${crop},w_${width},h_${height}`;
            if (effect) {
                transformation += `,e_${effect}:${effectIntensity}`;
            }

            // Generate the display URL without storing the transformation
            const cloudName = "@Model.CloudName";
            const publicId = "@Model.Photo.PublicId";
            const format = "@Model.Photo.Format";
            const newUrl = `https://res.cloudinary.com/${cloudName}/image/upload/${transformation}/${publicId}.${format}`;

            // Directly replace the image HTML with the transformed version
            document.getElementById('transformed-image').innerHTML = `<img src="${newUrl}" class="img-fluid rounded shadow-sm" alt="Transformed Image" />`;
        });
    </script>
}
